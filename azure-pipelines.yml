trigger:
  - develop
  - master

variables:
  YARN_CACHE_FOLDER: $(Pipeline.Workspace)./yarn

stages:
- stage: Build
  jobs:
    - job: Build
      pool:
        vmImage: 'ubuntu-latest'
      steps:
      - task: NodeTool@0
        inputs:
          versionSpec: '12.6.0'
        displayName: 'Install Node.js'
      - task: CacheBeta@0
        inputs:
          key: |
            yarn
            $(Agent.OS)
            $(Build.SourcesDirectory)/yarn.lock
          path: $(YARN_CACHE_FOLDER)
        displayName: 'Cache Yarn folders'
      - script: |
          yarn
          yarn build
        workingDirectory: $(Build.SourcesDirectory)
        displayName: 'npm install and build'
      # - task: CopyFiles@2
      #   inputs:
      #     sourceFolder: $(Build.SourcesDirectory)
      #     contents: |
      #       build/**
      #       .netlify/**
      #     flattenFolders: true
      #     targetFolder: $(Build.ArtifactStagingDirectory)
      - script: cp -R build/ .netlify/ netlify.toml $(Build.ArtifactStagingDirectory)
      - task: PublishPipelineArtifact@1
        inputs:
          path: $(Build.ArtifactStagingDirectory)
          artifact: 'WebApp'

- stage: deploy
  condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/master'))
  jobs:
    - job: downloadArtifact
      pool:
        vmImage: 'ubuntu-latest'
      steps:
        - task: DownloadPipelineArtifact@1
          inputs:
            buildType: 'current'
            artifactName: 'WebApp'
            targetPath: '$(Pipeline.Workspace)'
    - deployment: DeployJob
      pool:
        vmImage: 'ubuntu-latest'
      environment: production
      displayName: Deploy to Netlify
      strategy:
        runOnce:
          deploy:
            steps:
              - script: |
                  ls -la
                  # sudo npm i -g netlify-cli
                  # ntl deploy --dir=build --prod
                env:
                  NETLIFY_AUTH_TOKEN: $(NETLIFY_AUTH_TOKEN)

