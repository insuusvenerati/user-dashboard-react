trigger:
  - develop
  - master

variables:
  YARN_CACHE_FOLDER: $(Pipeline.Workspace)./yarn

stages:
- stage: Build
  jobs:
    - job: Build
      pool:
        vmImage: 'ubuntu-latest'
      steps:
      - task: NodeTool@0
        inputs:
          versionSpec: '12.6.0'
        displayName: 'Install Node.js'
      - task: CacheBeta@0
        inputs:
          key: |
            yarn
            $(Agent.OS)
            $(Build.SourcesDirectory)/yarn.lock
          path: $(YARN_CACHE_FOLDER)
        displayName: 'Cache Yarn folders'
      - script: |
          yarn
          yarn build
        workingDirectory: $(Build.SourcesDirectory)
        displayName: 'npm install and build'
      - task: PublishPipelineArtifact@1
        inputs:
          path: $(Build.SourcesDirectory)/build
          artifact: 'WebApp'

- stage: deploy
  condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/master'))
  jobs:
    - job: downloadArtifact
      pool:
        vmImage: 'ubuntu-latest'
      steps:
        - task: DownloadPipelineArtifact@1
          inputs:
            buildType: 'current'
            artifactName: 'WebApp'
    - deployment: DeployJob
      displayName: Deploy Job
      pool:
        vmImage: Ubuntu-16.04
      environment: staging
      strategy:
        runOnce:
          deploy:
            steps:
            - script: echo Hello
    # - deployment: DeployJob
    #   pool:
    #     vmImage: 'ubuntu-latest'
    #   environment: production
    #   displayName: Deploy to Netlify
    #   strategy:
    #     runOnce:
    #       deploy:
    #         steps:
    #           # - task: DownloadBuildArtifacts@1
    #           #   inputs:
    #           #     buildType: 'current'
    #           #     downloadType: 'single'
    #           #     artifactName: 'WebApp'
    #           - script: |
    #               yarn global add netlify-cli
    #               ntl deploy --dir=WebApp --prod
    #             env:
    #               NETLIFY_AUTH_TOKEN: $(NETLIFY_AUTH_TOKEN)

